// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, user_name, permissions, created_at, updated_at
) VALUES (
  uuid_generate_v4(), $1, $2, NOW(), NOW() 
)
RETURNING db_id, id, user_name, permissions, created_at, updated_at
`

type CreateUserParams struct {
	UserName    string `json:"user_name"`
	Permissions []byte `json:"permissions"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.UserName, arg.Permissions)
	var i User
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.UserName,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getByUserName = `-- name: GetByUserName :one
SELECT db_id, id, user_name, permissions, created_at, updated_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetByUserName(ctx context.Context, userName string) (*User, error) {
	row := q.db.QueryRow(ctx, getByUserName, userName)
	var i User
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.UserName,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT db_id, id, user_name, permissions, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.UserName,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT db_id, id, user_name, permissions, created_at, updated_at FROM users
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.UserName,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
