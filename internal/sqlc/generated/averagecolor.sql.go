// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: averagecolor.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createAverageColor = `-- name: CreateAverageColor :one
INSERT INTO average_colors (
  id, imageset_id, file_name, r, g, b, a, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, NOW(), NOW() 
)
RETURNING db_id, id, imageset_id, file_name, r, g, b, a, created_at, updated_at
`

type CreateAverageColorParams struct {
	ID         uuid.UUID `json:"id"`
	ImagesetID uuid.UUID `json:"imageset_id"`
	FileName   string    `json:"file_name"`
	R          int32     `json:"r"`
	G          int32     `json:"g"`
	B          int32     `json:"b"`
	A          int32     `json:"a"`
}

func (q *Queries) CreateAverageColor(ctx context.Context, arg CreateAverageColorParams) (*AverageColor, error) {
	row := q.db.QueryRow(ctx, createAverageColor,
		arg.ID,
		arg.ImagesetID,
		arg.FileName,
		arg.R,
		arg.G,
		arg.B,
		arg.A,
	)
	var i AverageColor
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.ImagesetID,
		&i.FileName,
		&i.R,
		&i.G,
		&i.B,
		&i.A,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAverageColor = `-- name: GetAverageColor :one
SELECT db_id, id, imageset_id, file_name, r, g, b, a, created_at, updated_at FROM average_colors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAverageColor(ctx context.Context, id uuid.UUID) (*AverageColor, error) {
	row := q.db.QueryRow(ctx, getAverageColor, id)
	var i AverageColor
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.ImagesetID,
		&i.FileName,
		&i.R,
		&i.G,
		&i.B,
		&i.A,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getByImageSetId = `-- name: GetByImageSetId :many
SELECT db_id, id, imageset_id, file_name, r, g, b, a, created_at, updated_at FROM average_colors
WHERE imageset_id = $1
`

func (q *Queries) GetByImageSetId(ctx context.Context, imagesetID uuid.UUID) ([]*AverageColor, error) {
	rows, err := q.db.Query(ctx, getByImageSetId, imagesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AverageColor
	for rows.Next() {
		var i AverageColor
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.ImagesetID,
			&i.FileName,
			&i.R,
			&i.G,
			&i.B,
			&i.A,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAverageColors = `-- name: ListAverageColors :many
SELECT db_id, id, imageset_id, file_name, r, g, b, a, created_at, updated_at FROM average_colors
ORDER BY file_name
`

func (q *Queries) ListAverageColors(ctx context.Context) ([]*AverageColor, error) {
	rows, err := q.db.Query(ctx, listAverageColors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AverageColor
	for rows.Next() {
		var i AverageColor
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.ImagesetID,
			&i.FileName,
			&i.R,
			&i.G,
			&i.B,
			&i.A,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
