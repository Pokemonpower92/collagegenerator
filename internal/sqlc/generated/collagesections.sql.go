// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: collagesections.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createCollageSection = `-- name: CreateCollageSection :one
INSERT INTO collage_sections (
  id, image_id, collage_id, section, created_at, updated_at
) VALUES (
  uuid_generate_v4(), $1, $2, $3, NOW(), NOW() 
)
RETURNING db_id, id, image_id, collage_id, section, created_at, updated_at
`

type CreateCollageSectionParams struct {
	ImageID   uuid.UUID `json:"image_id"`
	CollageID uuid.UUID `json:"collage_id"`
	Section   int32     `json:"section"`
}

func (q *Queries) CreateCollageSection(ctx context.Context, arg CreateCollageSectionParams) (*CollageSection, error) {
	row := q.db.QueryRow(ctx, createCollageSection, arg.ImageID, arg.CollageID, arg.Section)
	var i CollageSection
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.ImageID,
		&i.CollageID,
		&i.Section,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getByCollageId = `-- name: GetByCollageId :many
SELECT db_id, id, image_id, collage_id, section, created_at, updated_at FROM collage_sections
WHERE collage_id = $1
`

func (q *Queries) GetByCollageId(ctx context.Context, collageID uuid.UUID) ([]*CollageSection, error) {
	rows, err := q.db.Query(ctx, getByCollageId, collageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CollageSection
	for rows.Next() {
		var i CollageSection
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.ImageID,
			&i.CollageID,
			&i.Section,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
