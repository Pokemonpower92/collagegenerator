// Repositories are thin wrappers over the generated sqlc queries.

package repository

import (
	"fmt"

	"github.com/google/uuid"

	"github.com/pokemonpower92/collagegenerator/config"
	sqlc "github.com/pokemonpower92/collagegenerator/internal/sqlc/generated"
)

// Repository is a thin wrapper over the
// queries generated by sqlc.
type Repository[O, R any] interface {
	Get(id uuid.UUID) (*O, error)
	GetAll() ([]*O, error)
	Create(req R) (*O, error)
	Update(id uuid.UUID, req R) (*O, error)
	Delete(id uuid.UUID) error
}

// ResourceRepository is an extension of Repository
// that allows one to define the GetByResourceId method.
type ResourceRepository[O, R, Q any] interface {
	Repository[O, R]
	GetByResourceId(resourceId Q) ([]*O, error)
}

// Connect to the database defined in the given config
func GetConnectionString(config *config.DBConfig) string {
	return fmt.Sprintf("postgres://%s:%s@%s:%s/%s",
		config.User,
		config.Password,
		config.Host,
		config.Port,
		config.DBName,
	)
}

// Generic repository types.
type (
	ISRepo Repository[sqlc.ImageSet, sqlc.CreateImageSetParams]
	TIRepo Repository[sqlc.TargetImage, sqlc.CreateTargetImageParams]
	CRepo  Repository[sqlc.Collage, sqlc.CreateCollageParams]
)

// Resource repositories
// format is:
// TypeName ResourceRepository[resourceType, createResourceParams, resourceIdType]
type (
	ACRepo ResourceRepository[sqlc.AverageColor, sqlc.CreateAverageColorParams, uuid.UUID]
	CIRepo ResourceRepository[sqlc.CollageImage, uuid.UUID, uuid.UUID]
	URepo  ResourceRepository[sqlc.User, sqlc.CreateUserParams, string]
)
